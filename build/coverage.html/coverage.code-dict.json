{"/home/travis/build/npmtest/node-npmtest-humanize/test.js":"/* istanbul instrument in package npmtest_humanize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-humanize/lib.npmtest_humanize.js":"/* istanbul instrument in package npmtest_humanize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_humanize = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_humanize = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-humanize/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-humanize && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_humanize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_humanize\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_humanize.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_humanize.rollup.js'] =\n            local.assetsDict['/assets.npmtest_humanize.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_humanize.__dirname + '/lib.npmtest_humanize.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-humanize/node_modules/humanize/humanize.js":"\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  var root = this;\n\n  // Save the previous value of the `humanize` variable.\n  var previousHumanize = root.humanize;\n\n  var humanize = {};\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = humanize;\n    }\n    exports.humanize = humanize;\n  } else {\n    if (typeof define === 'function' && define.amd) {\n      define('humanize', function() {\n        return humanize;\n      });\n    }\n    root.humanize = humanize;\n  }\n\n  humanize.noConflict = function() {\n    root.humanize = previousHumanize;\n    return this;\n  };\n\n  humanize.pad = function(str, count, padChar, type) {\n    str += '';\n    if (!padChar) {\n      padChar = ' ';\n    } else if (padChar.length > 1) {\n      padChar = padChar.charAt(0);\n    }\n    type = (type === undefined) ? 'left' : 'right';\n\n    if (type === 'right') {\n      while (str.length < count) {\n        str = str + padChar;\n      }\n    } else {\n      // default to left\n      while (str.length < count) {\n        str = padChar + str;\n      }\n    }\n\n    return str;\n  };\n\n  // gets current unix time\n  humanize.time = function() {\n    return new Date().getTime() / 1000;\n  };\n\n  /**\n   * PHP-inspired date\n   */\n\n                        /*  jan  feb  mar  apr  may  jun  jul  aug  sep  oct  nov  dec */\n  var dayTableCommon = [ 0,   0,  31,  59,  90, 120, 151, 181, 212, 243, 273, 304, 334 ];\n  var dayTableLeap   = [ 0,   0,  31,  60,  91, 121, 152, 182, 213, 244, 274, 305, 335 ];\n  // var mtable_common[13] = {  0,  31,  28,  31,  30,  31,  30,  31,  31,  30,  31,  30,  31 };\n  // static int ml_table_leap[13]   = {  0,  31,  29,  31,  30,  31,  30,  31,  31,  30,  31,  30,  31 };\n\n\n  humanize.date = function(format, timestamp) {\n    var jsdate = ((timestamp === undefined) ? new Date() : // Not provided\n                  (timestamp instanceof Date) ? new Date(timestamp) : // JS Date()\n                  new Date(timestamp * 1000) // UNIX timestamp (auto-convert to int)\n                 );\n\n    var formatChr = /\\\\?([a-z])/gi;\n    var formatChrCb = function (t, s) {\n      return f[t] ? f[t]() : s;\n    };\n\n    var shortDayTxt = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    var monthTxt = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    var f = {\n      /* Day */\n      // Day of month w/leading 0; 01..31\n      d: function () { return humanize.pad(f.j(), 2, '0'); },\n\n      // Shorthand day name; Mon..Sun\n      D: function () { return f.l().slice(0, 3); },\n\n      // Day of month; 1..31\n      j: function () { return jsdate.getDate(); },\n\n      // Full day name; Monday..Sunday\n      l: function () { return shortDayTxt[f.w()]; },\n\n      // ISO-8601 day of week; 1[Mon]..7[Sun]\n      N: function () { return f.w() || 7; },\n\n      // Ordinal suffix for day of month; st, nd, rd, th\n      S: function () {\n        var j = f.j();\n        return j > 4 && j < 21 ? 'th' : {1: 'st', 2: 'nd', 3: 'rd'}[j % 10] || 'th';\n      },\n\n      // Day of week; 0[Sun]..6[Sat]\n      w: function () { return jsdate.getDay(); },\n\n      // Day of year; 0..365\n      z: function () {\n        return (f.L() ? dayTableLeap[f.n()] : dayTableCommon[f.n()]) + f.j() - 1;\n      },\n\n      /* Week */\n      // ISO-8601 week number\n      W: function () {\n        // days between midweek of this week and jan 4\n        // (f.z() - f.N() + 1 + 3.5) - 3\n        var midWeekDaysFromJan4 = f.z() - f.N() + 1.5;\n        // 1 + number of weeks + rounded week\n        return humanize.pad(1 + Math.floor(Math.abs(midWeekDaysFromJan4) / 7) + (midWeekDaysFromJan4 % 7 > 3.5 ? 1 : 0), 2, '0');\n      },\n\n      /* Month */\n      // Full month name; January..December\n      F: function () { return monthTxt[jsdate.getMonth()]; },\n\n      // Month w/leading 0; 01..12\n      m: function () { return humanize.pad(f.n(), 2, '0'); },\n\n      // Shorthand month name; Jan..Dec\n      M: function () { return f.F().slice(0, 3); },\n\n      // Month; 1..12\n      n: function () { return jsdate.getMonth() + 1; },\n\n      // Days in month; 28..31\n      t: function () { return (new Date(f.Y(), f.n(), 0)).getDate(); },\n\n      /* Year */\n      // Is leap year?; 0 or 1\n      L: function () { return new Date(f.Y(), 1, 29).getMonth() === 1 ? 1 : 0; },\n\n      // ISO-8601 year\n      o: function () {\n        var n = f.n();\n        var W = f.W();\n        return f.Y() + (n === 12 && W < 9 ? -1 : n === 1 && W > 9);\n      },\n\n      // Full year; e.g. 1980..2010\n      Y: function () { return jsdate.getFullYear(); },\n\n      // Last two digits of year; 00..99\n      y: function () { return (String(f.Y())).slice(-2); },\n\n      /* Time */\n      // am or pm\n      a: function () { return jsdate.getHours() > 11 ? 'pm' : 'am'; },\n\n      // AM or PM\n      A: function () { return f.a().toUpperCase(); },\n\n      // Swatch Internet time; 000..999\n      B: function () {\n        var unixTime = jsdate.getTime() / 1000;\n        var secondsPassedToday = unixTime % 86400 + 3600; // since it's based off of UTC+1\n        if (secondsPassedToday < 0) { secondsPassedToday += 86400; }\n        var beats = ((secondsPassedToday) / 86.4) % 1000;\n        if (unixTime < 0) {\n          return Math.ceil(beats);\n        }\n        return Math.floor(beats);\n      },\n\n      // 12-Hours; 1..12\n      g: function () { return f.G() % 12 || 12; },\n\n      // 24-Hours; 0..23\n      G: function () { return jsdate.getHours(); },\n\n      // 12-Hours w/leading 0; 01..12\n      h: function () { return humanize.pad(f.g(), 2, '0'); },\n\n      // 24-Hours w/leading 0; 00..23\n      H: function () { return humanize.pad(f.G(), 2, '0'); },\n\n      // Minutes w/leading 0; 00..59\n      i: function () { return humanize.pad(jsdate.getMinutes(), 2, '0'); },\n\n      // Seconds w/leading 0; 00..59\n      s: function () { return humanize.pad(jsdate.getSeconds(), 2, '0'); },\n\n      // Microseconds; 000000-999000\n      u: function () { return humanize.pad(jsdate.getMilliseconds() * 1000, 6, '0'); },\n\n      // Whether or not the date is in daylight savings time\n      /*\n      I: function () {\n        // Compares Jan 1 minus Jan 1 UTC to Jul 1 minus Jul 1 UTC.\n        // If they are not equal, then DST is observed.\n        var Y = f.Y();\n        return 0 + ((new Date(Y, 0) - Date.UTC(Y, 0)) !== (new Date(Y, 6) - Date.UTC(Y, 6)));\n      },\n      */\n\n      // Difference to GMT in hour format; e.g. +0200\n      O: function () {\n        var tzo = jsdate.getTimezoneOffset();\n        var tzoNum = Math.abs(tzo);\n        return (tzo > 0 ? '-' : '+') + humanize.pad(Math.floor(tzoNum / 60) * 100 + tzoNum % 60, 4, '0');\n      },\n\n      // Difference to GMT w/colon; e.g. +02:00\n      P: function () {\n        var O = f.O();\n        return (O.substr(0, 3) + ':' + O.substr(3, 2));\n      },\n\n      // Timezone offset in seconds (-43200..50400)\n      Z: function () { return -jsdate.getTimezoneOffset() * 60; },\n\n      // Full Date/Time, ISO-8601 date\n      c: function () { return 'Y-m-d\\\\TH:i:sP'.replace(formatChr, formatChrCb); },\n\n      // RFC 2822\n      r: function () { return 'D, d M Y H:i:s O'.replace(formatChr, formatChrCb); },\n\n      // Seconds since UNIX epoch\n      U: function () { return jsdate.getTime() / 1000 || 0; }\n    };    \n\n    return format.replace(formatChr, formatChrCb);\n  };\n\n\n  /**\n   * format number by adding thousands separaters and significant digits while rounding\n   */\n  humanize.numberFormat = function(number, decimals, decPoint, thousandsSep) {\n    decimals = isNaN(decimals) ? 2 : Math.abs(decimals);\n    decPoint = (decPoint === undefined) ? '.' : decPoint;\n    thousandsSep = (thousandsSep === undefined) ? ',' : thousandsSep;\n\n    var sign = number < 0 ? '-' : '';\n    number = Math.abs(+number || 0);\n\n    var intPart = parseInt(number.toFixed(decimals), 10) + '';\n    var j = intPart.length > 3 ? intPart.length % 3 : 0;\n\n    return sign + (j ? intPart.substr(0, j) + thousandsSep : '') + intPart.substr(j).replace(/(\\d{3})(?=\\d)/g, '$1' + thousandsSep) + (decimals ? decPoint + Math.abs(number - intPart).toFixed(decimals).slice(2) : '');\n  };\n\n\n  /**\n   * For dates that are the current day or within one day, return 'today', 'tomorrow' or 'yesterday', as appropriate.\n   * Otherwise, format the date using the passed in format string.\n   *\n   * Examples (when 'today' is 17 Feb 2007):\n   * 16 Feb 2007 becomes yesterday.\n   * 17 Feb 2007 becomes today.\n   * 18 Feb 2007 becomes tomorrow.\n   * Any other day is formatted according to given argument or the DATE_FORMAT setting if no argument is given.\n   */\n  humanize.naturalDay = function(timestamp, format) {\n    timestamp = (timestamp === undefined) ? humanize.time() : timestamp;\n    format = (format === undefined) ? 'Y-m-d' : format;\n\n    var oneDay = 86400;\n    var d = new Date();\n    var today = (new Date(d.getFullYear(), d.getMonth(), d.getDate())).getTime() / 1000;\n\n    if (timestamp < today && timestamp >= today - oneDay) {\n      return 'yesterday';\n    } else if (timestamp >= today && timestamp < today + oneDay) {\n      return 'today';\n    } else if (timestamp >= today + oneDay && timestamp < today + 2 * oneDay) {\n      return 'tomorrow';\n    }\n\n    return humanize.date(format, timestamp);\n  };\n\n  /**\n   * returns a string representing how many seconds, minutes or hours ago it was or will be in the future\n   * Will always return a relative time, most granular of seconds to least granular of years. See unit tests for more details\n   */\n  humanize.relativeTime = function(timestamp) {\n    timestamp = (timestamp === undefined) ? humanize.time() : timestamp;\n\n    var currTime = humanize.time();\n    var timeDiff = currTime - timestamp;\n\n    // within 2 seconds\n    if (timeDiff < 2 && timeDiff > -2) {\n      return (timeDiff >= 0 ? 'just ' : '') + 'now';\n    }\n\n    // within a minute\n    if (timeDiff < 60 && timeDiff > -60) {\n      return (timeDiff >= 0 ? Math.floor(timeDiff) + ' seconds ago' : 'in ' + Math.floor(-timeDiff) + ' seconds');\n    }\n\n    // within 2 minutes\n    if (timeDiff < 120 && timeDiff > -120) {\n      return (timeDiff >= 0 ? 'about a minute ago' : 'in about a minute');\n    }\n\n    // within an hour\n    if (timeDiff < 3600 && timeDiff > -3600) {\n      return (timeDiff >= 0 ? Math.floor(timeDiff / 60) + ' minutes ago' : 'in ' + Math.floor(-timeDiff / 60) + ' minutes');\n    }\n\n    // within 2 hours\n    if (timeDiff < 7200 && timeDiff > -7200) {\n      return (timeDiff >= 0 ? 'about an hour ago' : 'in about an hour');\n    }\n\n    // within 24 hours\n    if (timeDiff < 86400 && timeDiff > -86400) {\n      return (timeDiff >= 0 ? Math.floor(timeDiff / 3600) + ' hours ago' : 'in ' + Math.floor(-timeDiff / 3600) + ' hours');\n    }\n\n    // within 2 days\n    var days2 = 2 * 86400;\n    if (timeDiff < days2 && timeDiff > -days2) {\n      return (timeDiff >= 0 ? '1 day ago' : 'in 1 day');\n    }\n\n    // within 29 days\n    var days29 = 29 * 86400;\n    if (timeDiff < days29 && timeDiff > -days29) {\n      return (timeDiff >= 0 ? Math.floor(timeDiff / 86400) + ' days ago' : 'in ' + Math.floor(-timeDiff / 86400) + ' days');\n    }\n\n    // within 60 days\n    var days60 = 60 * 86400;\n    if (timeDiff < days60 && timeDiff > -days60) {\n      return (timeDiff >= 0 ? 'about a month ago' : 'in about a month');\n    }\n\n    var currTimeYears = parseInt(humanize.date('Y', currTime), 10);\n    var timestampYears = parseInt(humanize.date('Y', timestamp), 10);\n    var currTimeMonths = currTimeYears * 12 + parseInt(humanize.date('n', currTime), 10);\n    var timestampMonths = timestampYears * 12 + parseInt(humanize.date('n', timestamp), 10);\n\n    // within a year\n    var monthDiff = currTimeMonths - timestampMonths;\n    if (monthDiff < 12 && monthDiff > -12) {\n      return (monthDiff >= 0 ? monthDiff + ' months ago' : 'in ' + (-monthDiff) + ' months');\n    }\n\n    var yearDiff = currTimeYears - timestampYears;\n    if (yearDiff < 2 && yearDiff > -2) {\n      return (yearDiff >= 0 ? 'a year ago' : 'in a year');\n    }\n\n    return (yearDiff >= 0 ? yearDiff + ' years ago' : 'in ' + (-yearDiff) + ' years');\n  };\n\n  /**\n   * Converts an integer to its ordinal as a string.\n   *\n   * 1 becomes 1st\n   * 2 becomes 2nd\n   * 3 becomes 3rd etc\n   */\n  humanize.ordinal = function(number) {\n    number = parseInt(number, 10);\n    number = isNaN(number) ? 0 : number;\n    var sign = number < 0 ? '-' : '';\n    number = Math.abs(number);\n    var tens = number % 100;\n\n    return sign + number + (tens > 4 && tens < 21 ? 'th' : {1: 'st', 2: 'nd', 3: 'rd'}[number % 10] || 'th');\n  };\n\n  /**\n   * Formats the value like a 'human-readable' file size (i.e. '13 KB', '4.1 MB', '102 bytes', etc).\n   *\n   * For example:\n   * If value is 123456789, the output would be 117.7 MB.\n   */\n  humanize.filesize = function(filesize, kilo, decimals, decPoint, thousandsSep, suffixSep) {\n    kilo = (kilo === undefined) ? 1024 : kilo;\n    if (filesize <= 0) { return '0 bytes'; }\n    if (filesize < kilo && decimals === undefined) { decimals = 0; }\n    if (suffixSep === undefined) { suffixSep = ' '; }\n    return humanize.intword(filesize, ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB'], kilo, decimals, decPoint, thousandsSep, suffixSep);\n  };\n\n  /**\n   * Formats the value like a 'human-readable' number (i.e. '13 K', '4.1 M', '102', etc).\n   *\n   * For example:\n   * If value is 123456789, the output would be 117.7 M.\n   */\n  humanize.intword = function(number, units, kilo, decimals, decPoint, thousandsSep, suffixSep) {\n    var humanized, unit;\n\n    units = units || ['', 'K', 'M', 'B', 'T'],\n    unit = units.length - 1,\n    kilo = kilo || 1000,\n    decimals = isNaN(decimals) ? 2 : Math.abs(decimals),\n    decPoint = decPoint || '.',\n    thousandsSep = thousandsSep || ',',\n    suffixSep = suffixSep || '';\n\n    for (var i=0; i < units.length; i++) {\n      if (number < Math.pow(kilo, i+1)) {\n        unit = i;\n        break;\n      }\n    }\n    humanized = number / Math.pow(kilo, unit);\n\n    var suffix = units[unit] ? suffixSep + units[unit] : '';\n    return humanize.numberFormat(humanized, decimals, decPoint, thousandsSep) + suffix;\n  };\n\n  /**\n   * Replaces line breaks in plain text with appropriate HTML\n   * A single newline becomes an HTML line break (<br />) and a new line followed by a blank line becomes a paragraph break (</p>).\n   * \n   * For example:\n   * If value is Joel\\nis a\\n\\nslug, the output will be <p>Joel<br />is a</p><p>slug</p>\n   */\n  humanize.linebreaks = function(str) {\n    // remove beginning and ending newlines\n    str = str.replace(/^([\\n|\\r]*)/, '');\n    str = str.replace(/([\\n|\\r]*)$/, '');\n\n    // normalize all to \\n\n    str = str.replace(/(\\r\\n|\\n|\\r)/g, \"\\n\");\n\n    // any consecutive new lines more than 2 gets turned into p tags\n    str = str.replace(/(\\n{2,})/g, '</p><p>');\n\n    // any that are singletons get turned into br\n    str = str.replace(/\\n/g, '<br />');\n    return '<p>' + str + '</p>';\n  };\n\n  /**\n   * Converts all newlines in a piece of plain text to HTML line breaks (<br />).\n   */\n  humanize.nl2br = function(str) {\n    return str.replace(/(\\r\\n|\\n|\\r)/g, '<br />');\n  };\n\n  /**\n   * Truncates a string if it is longer than the specified number of characters.\n   * Truncated strings will end with a translatable ellipsis sequence ('…').\n   */\n  humanize.truncatechars = function(string, length) {\n    if (string.length <= length) { return string; }\n    return string.substr(0, length) + '…';\n  };\n\n  /**\n   * Truncates a string after a certain number of words.\n   * Newlines within the string will be removed.\n   */\n  humanize.truncatewords = function(string, numWords) {\n    var words = string.split(' ');\n    if (words.length < numWords) { return string; }\n    return words.slice(0, numWords).join(' ') + '…';\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-humanize/node_modules/humanize/specs/dateData.js":"module.exports = function() {\n\n  // all in America/Los_Angeles timezone\n\n  var timestamps = {\n    // 04/16/1986 18:23:47\n    '514088627': {\n      d: '16',\n      D: 'Wed',\n      j: '16',\n      l: 'Wednesday',\n      N: '3',\n      S: 'th',\n      w: '3',\n      z: '105',\n      W: '16',\n      F: 'April',\n      m: '04',\n      M: 'Apr',\n      n: '4',\n      t: '30',\n      L: '0',\n      o: '1986',\n      Y: '1986',\n      y: '86',\n      a: 'pm',\n      A: 'PM',\n      B: '141',\n      g: '6',\n      G: '18',\n      h: '06',\n      H: '18',\n      i: '23',\n      s: '47',\n      u: '000000',\n      // I: '0',\n      O: '-0800',\n      P: '-08:00',\n      Z: '-28800',\n      c: '1986-04-16T18:23:47-08:00',\n      r: 'Wed, 16 Apr 1986 18:23:47 -0800',\n      U: '514088627'\n    },\n\n    // 12/25/1999 01:09:03\n    '946112943': {\n      d: '25',\n      D: 'Sat',\n      j: '25',\n      l: 'Saturday',\n      N: '6',\n      S: 'th',\n      w: '6',\n      z: '358',\n      W: '51',\n      F: 'December',\n      m: '12',\n      M: 'Dec',\n      n: '12',\n      t: '31',\n      L: '0',\n      o: '1999',\n      Y: '1999',\n      y: '99',\n      a: 'am',\n      A: 'AM',\n      B: '422',\n      g: '1',\n      G: '1',\n      h: '01',\n      H: '01',\n      i: '09',\n      s: '03',\n      u: '000000',\n      // I: '0',\n      O: '-0800',\n      P: '-08:00',\n      Z: '-28800',\n      c: '1999-12-25T01:09:03-08:00',\n      r: 'Sat, 25 Dec 1999 01:09:03 -0800',\n      U: '946112943'\n    },\n\n    // 07/10/2011 12:23:58\n    '1310325838': {\n      d: '10',\n      D: 'Sun',\n      j: '10',\n      l: 'Sunday',\n      N: '7',\n      S: 'th',\n      w: '0',\n      z: '190',\n      W: '27',\n      F: 'July',\n      m: '07',\n      M: 'Jul',\n      n: '7',\n      t: '31',\n      L: '0',\n      o: '2011',\n      Y: '2011',\n      y: '11',\n      a: 'pm',\n      A: 'PM',\n      B: '849',\n      g: '12',\n      G: '12',\n      h: '12',\n      H: '12',\n      i: '23',\n      s: '58',\n      u: '000000',\n      // I: '1',\n      O: '-0700',\n      P: '-07:00',\n      Z: '-25200',\n      c: '2011-07-10T12:23:58-07:00',\n      r: 'Sun, 10 Jul 2011 12:23:58 -0700',\n      U: '1310325838'\n    },\n\n    // 10/05/2015 00:00:00\n    '1444028400': {\n      d: '05',\n      D: 'Mon',\n      j: '5',\n      l: 'Monday',\n      N: '1',\n      S: 'th',\n      w: '1',\n      z: '277',\n      W: '41',\n      F: 'October',\n      m: '10',\n      M: 'Oct',\n      n: '10',\n      t: '31',\n      L: '0',\n      o: '2015',\n      Y: '2015',\n      y: '15',\n      a: 'am',\n      A: 'AM',\n      B: '333',\n      g: '12',\n      G: '0',\n      h: '12',\n      H: '00',\n      i: '00',\n      s: '00',\n      u: '000000',\n      // I: '1',\n      O: '-0700',\n      P: '-07:00',\n      Z: '-25200',\n      c: '2015-10-05T00:00:00-07:00',\n      r: 'Mon, 05 Oct 2015 00:00:00 -0700',\n      U: '1444028400'\n    },\n\n    // 03/31/2000 13:25:14\n    '954537914': {\n      d: '31',\n      D: 'Fri',\n      j: '31',\n      l: 'Friday',\n      N: '5',\n      S: 'st',\n      w: '5',\n      z: '90',\n      W: '13',\n      F: 'March',\n      m: '03',\n      M: 'Mar',\n      n: '3',\n      t: '31',\n      L: '1',\n      o: '2000',\n      Y: '2000',\n      y: '00',\n      a: 'pm',\n      A: 'PM',\n      B: '934',\n      g: '1',\n      G: '13',\n      h: '01',\n      H: '13',\n      i: '25',\n      s: '14',\n      u: '000000',\n      // I: '0',\n      O: '-0800',\n      P: '-08:00',\n      Z: '-28800',\n      c: '2000-03-31T13:25:14-08:00',\n      r: 'Fri, 31 Mar 2000 13:25:14 -0800',\n      U: '954537914'\n    },\n\n    // 01/02/3456 12:34:56\n    '46893760496': {\n      d: '02',\n      D: 'Wed',\n      j: '2',\n      l: 'Wednesday',\n      N: '3',\n      S: 'nd',\n      w: '3',\n      z: '1',\n      W: '01',\n      F: 'January',\n      m: '01',\n      M: 'Jan',\n      n: '1',\n      t: '31',\n      L: '1',\n      o: '3456',\n      Y: '3456',\n      y: '56',\n      a: 'pm',\n      A: 'PM',\n      B: '899',\n      g: '12',\n      G: '12',\n      h: '12',\n      H: '12',\n      i: '34',\n      s: '56',\n      u: '000000',\n      // I: '0',\n      O: '-0800',\n      P: '-08:00',\n      Z: '-28800',\n      c: '3456-01-02T12:34:56-08:00',\n      r: 'Wed, 02 Jan 3456 12:34:56 -0800',\n      U: '46893760496'\n    },\n\n    // 01/11/1840 11:56:14\n    '-4101509026': {\n      d: '11',\n      D: 'Sat',\n      j: '11',\n      l: 'Saturday',\n      N: '6',\n      S: 'th',\n      w: '6',\n      z: '10',\n      W: '02',\n      F: 'January',\n      m: '01',\n      M: 'Jan',\n      n: '1',\n      t: '31',\n      L: '1',\n      o: '1840',\n      Y: '1840',\n      y: '40',\n      a: 'am',\n      A: 'AM',\n      B: '873',\n      g: '11',\n      G: '11',\n      h: '11',\n      H: '11',\n      i: '56',\n      s: '14',\n      u: '000000',\n      // I: '0',\n      O: '-0800',\n      P: '-08:00',\n      Z: '-28800',\n      c: '1840-01-11T11:56:14-08:00',\n      r: 'Sat, 11 Jan 1840 11:56:14 -0800',\n      U: '-4101509026'\n    }\n  };\n\n  return {\n    timestamps: timestamps\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-humanize/node_modules/humanize/specs/humanize.spec.js":"var should = require('should');\nvar humanize = require('../humanize');\nprocess.env.TZ = 'America/Los_Angeles';\n\ndescribe('humanize:', function() {\n\n  describe('#pad', function() {\n    it('should be able to pad on the left', function() {\n      humanize.pad(123, 4, '0').should.equal('0123');\n      humanize.pad('abcd', 3, 'c').should.equal('abcd');\n      humanize.pad('cool', 7, 'Blah').should.equal('BBBcool');\n    });\n\n    it('should be able to pad on the right', function() {\n      humanize.pad(123, 4, '0', 'right').should.equal('1230');\n      humanize.pad('abcd', 3, 'c', 'right').should.equal('abcd');\n      humanize.pad('cool', 7, 'Blah', 'right').should.equal('coolBBB');\n    });\n  });\n\n\n  describe('#time', function() {\n    it('should be able to get the current time', function() {\n      // I'm not sure how to make this better yet ...\n      parseInt(humanize.time()).should.equal(parseInt(new Date().getTime() / 1000, 10));\n    });\n  });\n\n  describe('#date', function() {\n    var timestamps = require('./dateData.js')().timestamps;\n\n    it('should be able to accept timestamp, js date object, or nothing', function() {\n      var timestamp = 514088627;\n      var today = new Date();\n      humanize.date('Y-m-d').should.equal(today.getFullYear() + '-' + humanize.pad(today.getMonth() + 1, 2, '0') + '-' + humanize.pad(today.getDate(), 2, '0'));\n      humanize.date('Y-m-d', timestamp).should.equal('1986-04-16');\n      humanize.date('Y-m-d', new Date(timestamp * 1000)).should.equal('1986-04-16');\n    });\n\n    it('should be able to print out escaped characters', function() {\n      var timestamp = 514088627;\n      var today = new Date();\n      humanize.date('Y-m-d\\\\Y\\\\z\\\\d').should.equal(today.getFullYear() + '-' + humanize.pad(today.getMonth() + 1, 2, '0') + '-' + humanize.pad(today.getDate(), 2, '0') + 'Yzd');\n      humanize.date('Y-m-d\\\\Y\\\\z\\\\d', timestamp).should.equal('1986-04-16Yzd');\n      humanize.date('Y-m-d\\\\Y\\\\z\\\\d', new Date(timestamp * 1000)).should.equal('1986-04-16Yzd');\n    });\n\n    it('should be able to replace correct information', function() {\n      for (var timestamp in timestamps) {\n        for (var dateVal in timestamps[timestamp]) {\n          var info = 'timestamp: ' + timestamp + ' dateVal: ' + dateVal;\n          humanize.date(dateVal, timestamp).should.eql(timestamps[timestamp][dateVal], info);\n        }\n      }\n    });\n\n  });\n\n\n  describe('#numberFormat', function() {\n    var number = 1234567.1234567;\n    var negNumber = -1234567.1234567;\n    it('should default using 2 decimals, \".\" as decimal point, \",\" as thousands separator', function() {\n      humanize.numberFormat(number).should.equal('1,234,567.12');\n    });\n\n    it('should be able to deal with different number of decimals properly + rounding', function() {\n      humanize.numberFormat(number, 0).should.equal('1,234,567');\n      humanize.numberFormat(number, 3).should.equal('1,234,567.123');\n      humanize.numberFormat(number, 4).should.equal('1,234,567.1235');\n      humanize.numberFormat(number, 5).should.equal('1,234,567.12346');\n      humanize.numberFormat(number, 6).should.equal('1,234,567.123457');\n      humanize.numberFormat(number, 7).should.equal('1,234,567.1234567');\n      humanize.numberFormat(number, 8).should.equal('1,234,567.12345670');\n      humanize.numberFormat(number, 9).should.equal('1,234,567.123456700');\n\n      humanize.numberFormat(negNumber, 0).should.equal('-1,234,567');\n      humanize.numberFormat(negNumber, 3).should.equal('-1,234,567.123');\n      humanize.numberFormat(negNumber, 4).should.equal('-1,234,567.1235');\n      humanize.numberFormat(negNumber, 5).should.equal('-1,234,567.12346');\n      humanize.numberFormat(negNumber, 6).should.equal('-1,234,567.123457');\n      humanize.numberFormat(negNumber, 7).should.equal('-1,234,567.1234567');\n      humanize.numberFormat(negNumber, 8).should.equal('-1,234,567.12345670');\n      humanize.numberFormat(negNumber, 9).should.equal('-1,234,567.123456700');\n    });\n\n    it('should be able to deal with negative decimals as if they were positive', function() {\n      humanize.numberFormat(number, -3).should.equal(humanize.numberFormat(number, 3));\n    });\n\n    it('should be able to change the decimal point to a different string', function() {\n      humanize.numberFormat(number, 3, 'P').should.equal('1,234,567P123');\n      humanize.numberFormat(number, 3, ',').should.equal('1,234,567,123');\n      humanize.numberFormat(number, 3, 'what?').should.equal('1,234,567what?123');\n    });\n\n    it('should be able to change the thousands separator to a different string', function() {\n      humanize.numberFormat(number, 3, '.', '.').should.equal('1.234.567.123');\n      humanize.numberFormat(number, 3, ',', '.').should.equal('1.234.567,123');\n      humanize.numberFormat(number, 3, '.', 'huh?').should.equal('1huh?234huh?567.123');\n    });\n  });\n\n  describe('#naturalDay', function() {\n    var d = new Date();\n    var today = (new Date(d.getFullYear(), d.getMonth(), d.getDate())).getTime() / 1000;\n\n    it('should return today when using today', function() {\n      humanize.naturalDay(today).should.equal('today');\n      humanize.naturalDay(today + 43200).should.equal('today');\n      humanize.naturalDay(today + 86399).should.equal('today');\n    });\n\n    it('should return yesterday when using yesterday', function() {\n      humanize.naturalDay(today - 1).should.equal('yesterday');\n      humanize.naturalDay(today - 43200).should.equal('yesterday');\n      humanize.naturalDay(today - 86400).should.equal('yesterday');\n    });\n\n    it('should return tomorrow when using tomorrow', function() {\n      humanize.naturalDay(today + 86400).should.equal('tomorrow');\n      humanize.naturalDay(today + 86400 + 43200).should.equal('tomorrow');\n      humanize.naturalDay(today + 86400 + 86399).should.equal('tomorrow');\n    });\n\n    it('should return date when before yesterday with default formatting', function() {\n      humanize.naturalDay(today - 86401).should.equal(humanize.date('Y-m-d', today - 86401));\n      humanize.naturalDay(today - 86411).should.equal(humanize.date('Y-m-d', today - 86411));\n      humanize.naturalDay(today - (2 * 86401)).should.equal(humanize.date('Y-m-d', today - (2 * 86401)));\n    });\n\n    it('should return date when before yesterday with custom formatting', function() {\n      humanize.naturalDay(today - 86401, 'h:i:s').should.equal(humanize.date('h:i:s', today - 86401));\n      humanize.naturalDay(today - 86401, 'l F j, Y h:i:s').should.equal(humanize.date('l F j, Y h:i:s', today - 86401));\n    });\n\n    it('should return date when after tomorrow', function() {\n      humanize.naturalDay(today + 86400 + 86401).should.equal(humanize.date('Y-m-d', today + 86400 + 86401));\n      humanize.naturalDay(today + 86400 + 86411).should.equal(humanize.date('Y-m-d', today + 86400 + 86411));\n      humanize.naturalDay(today + (2 * 86401)).should.equal(humanize.date('Y-m-d', today + (2 * 86401)));\n    });\n\n    it('should return date when before tomorrow with custom formatting', function() {\n      humanize.naturalDay(today + 86400 + 86401, 'h:i:s').should.equal(humanize.date('h:i:s', today + 86400 + 86401));\n      humanize.naturalDay(today + 86400 + 86401, 'l F j, Y h:i:s').should.equal(humanize.date('l F j, Y h:i:s', today + 86400 + 86401));\n    });\n  });\n\n  describe('#relativeTime', function() {\n    it('should return just now for anything within 2 seconds', function() {\n      humanize.relativeTime(humanize.time() - 1).should.equal('just now');\n      humanize.relativeTime(humanize.time() - .5).should.equal('just now');\n      humanize.relativeTime(humanize.time()).should.equal('just now');\n      humanize.relativeTime(humanize.time() + .5).should.equal('now');\n      humanize.relativeTime(humanize.time() + 1).should.equal('now');\n    });\n\n    it('should return (in) X seconds (ago) for anything between 2 seconds and 59 seconds inclusive', function() {\n      humanize.relativeTime(humanize.time() - 59).should.equal('59 seconds ago');\n      humanize.relativeTime(humanize.time() - 37).should.equal('37 seconds ago');\n      humanize.relativeTime(humanize.time() - 37.3).should.equal('37 seconds ago');\n      humanize.relativeTime(humanize.time() - 2).should.equal('2 seconds ago');\n      humanize.relativeTime(humanize.time() + 2).should.equal('in 2 seconds');\n      humanize.relativeTime(humanize.time() + 22).should.equal('in 22 seconds');\n      humanize.relativeTime(humanize.time() + 22.7).should.equal('in 22 seconds');\n      humanize.relativeTime(humanize.time() + 59).should.equal('in 59 seconds');\n    });\n\n    it('should return (in) about a minute (ago) for anything between 1 minute (inclusive) and 2 minutes (exclusive)', function() {\n      humanize.relativeTime(humanize.time() - 119).should.equal('about a minute ago');\n      humanize.relativeTime(humanize.time() - 73).should.equal('about a minute ago');\n      humanize.relativeTime(humanize.time() - 60).should.equal('about a minute ago');\n      humanize.relativeTime(humanize.time() + 60).should.equal('in about a minute');\n      humanize.relativeTime(humanize.time() + 90).should.equal('in about a minute');\n      humanize.relativeTime(humanize.time() + 119).should.equal('in about a minute');\n    });\n\n    it('should return (in) X minutes (ago) for anything between 2 minutes (inclusive) and 60 minutes (exclusive)', function() {\n      humanize.relativeTime(humanize.time() - 59*60 - 59).should.equal('59 minutes ago');\n      humanize.relativeTime(humanize.time() - 59*60 - 10).should.equal('59 minutes ago');\n      humanize.relativeTime(humanize.time() - 33*60 - 17).should.equal('33 minutes ago');\n      humanize.relativeTime(humanize.time() - 33*60 - 35).should.equal('33 minutes ago');\n      humanize.relativeTime(humanize.time() - 120).should.equal('2 minutes ago');\n      humanize.relativeTime(humanize.time() + 120).should.equal('in 2 minutes');\n      humanize.relativeTime(humanize.time() + 24*60 + 17).should.equal('in 24 minutes');\n      humanize.relativeTime(humanize.time() + 47*60 + 35).should.equal('in 47 minutes');\n      humanize.relativeTime(humanize.time() + 59*60 + 16).should.equal('in 59 minutes');\n      humanize.relativeTime(humanize.time() + 59*60 + 59).should.equal('in 59 minutes');\n    });\n\n    it('should return (in) about an hour (ago) for anything between 1 hour (inclusive) and 2 hours (exclusive)', function() {\n      humanize.relativeTime(humanize.time() - 7199).should.equal('about an hour ago');\n      humanize.relativeTime(humanize.time() - 3601).should.equal('about an hour ago');\n      humanize.relativeTime(humanize.time() - 3600).should.equal('about an hour ago');\n      humanize.relativeTime(humanize.time() + 3600).should.equal('in about an hour');\n      humanize.relativeTime(humanize.time() + 5974).should.equal('in about an hour');\n      humanize.relativeTime(humanize.time() + 7199).should.equal('in about an hour');\n    });\n\n    it('should return (in) X hours (ago) for anything between 2 hours (inclusive) and 24 hours (exclusive)', function() {\n      humanize.relativeTime(humanize.time() - 86399).should.equal('23 hours ago');\n      humanize.relativeTime(humanize.time() - (3*3600 + 56)).should.equal('3 hours ago');\n      humanize.relativeTime(humanize.time() - (15*3600 + 3599)).should.equal('15 hours ago');\n      humanize.relativeTime(humanize.time() - 7200).should.equal('2 hours ago');\n      humanize.relativeTime(humanize.time() + 7200).should.equal('in 2 hours');\n      humanize.relativeTime(humanize.time() + (10*3600 + 997)).should.equal('in 10 hours');\n      humanize.relativeTime(humanize.time() + (15*3600 + 3599)).should.equal('in 15 hours');\n      humanize.relativeTime(humanize.time() + 86399).should.equal('in 23 hours');\n    });\n\n    it('should return (in) X day(s) (ago) for anything between 1 day (inclusive) and 29 days (exclusive)', function() {\n      humanize.relativeTime(humanize.time() - (29*86400 - 1)).should.equal('28 days ago');\n      humanize.relativeTime(humanize.time() - (2*86400)).should.equal('2 days ago');\n      humanize.relativeTime(humanize.time() - (2*86400 - 1)).should.equal('1 day ago');\n      humanize.relativeTime(humanize.time() - 86400).should.equal('1 day ago');\n      humanize.relativeTime(humanize.time() + 86400).should.equal('in 1 day');\n      humanize.relativeTime(humanize.time() + (2*86400)).should.equal('in 2 days');\n      humanize.relativeTime(humanize.time() + (29*86400 - 1)).should.equal('in 28 days');\n    });\n\n    it('should return (in) about a month (ago) for anything between 28 days (inclusive) to 60 days (exclusive)', function() {\n      humanize.relativeTime(humanize.time() - (60*86400 - 1)).should.equal('about a month ago');\n      humanize.relativeTime(humanize.time() - (29*86400)).should.equal('about a month ago');\n      humanize.relativeTime(humanize.time() + (29*86400)).should.equal('in about a month');\n      humanize.relativeTime(humanize.time() + (60*86400 - 1)).should.equal('in about a month');\n    });\n\n    it('should return (in) X months (ago) using month arithmetic', function() {\n      humanize.relativeTime(humanize.time() - (60*86400)).should.equal('2 months ago');\n      humanize.relativeTime(humanize.time() + (60*86400)).should.equal('in 2 months');\n\n      var d = new Date();\n      var monthsAgo4 = (new Date(d.getFullYear(), d.getMonth() - 4, d.getDate())).getTime() / 1000;\n      humanize.relativeTime(monthsAgo4).should.equal('4 months ago');\n\n      var monthsFuture4 = (new Date(d.getFullYear(), d.getMonth() + 4, d.getDate())).getTime() / 1000;\n      humanize.relativeTime(monthsFuture4).should.equal('in 4 months');\n\n      var monthsAgo11 = (new Date(d.getFullYear(), d.getMonth() - 11, d.getDate())).getTime() / 1000;\n      humanize.relativeTime(monthsAgo11).should.equal('11 months ago');\n\n      var monthsFuture11 = (new Date(d.getFullYear(), d.getMonth() + 11, d.getDate())).getTime() / 1000;\n      humanize.relativeTime(monthsFuture11).should.equal('in 11 months');\n    });\n\n    it('should return (in) X year(s) (ago) for anything over a year via year arithmetic', function() {\n      var d = new Date();\n      var yearsAgo1 = (new Date(d.getFullYear() - 1, d.getMonth(), d.getDate())).getTime() / 1000;\n      humanize.relativeTime(yearsAgo1).should.equal('a year ago');\n\n      var yearsFuture1 = (new Date(d.getFullYear() + 1, d.getMonth(), d.getDate())).getTime() / 1000;\n      humanize.relativeTime(yearsFuture1).should.equal('in a year');\n\n      var june1 = (new Date(d.getFullYear(), 5, 1));\n\n      var yearsAgo2 = (new Date(june1.getFullYear() - 2, june1.getMonth() + 6, june1.getDate() + 19)).getTime() / 1000;\n      humanize.relativeTime(yearsAgo2).should.equal('2 years ago');\n\n      var wrapToYearsAgo1 = (new Date(june1.getFullYear() - 2, june1.getMonth() + 7, june1.getDate() + 19)).getTime() / 1000;\n      humanize.relativeTime(wrapToYearsAgo1).should.equal('a year ago');\n\n      var yearsFuture2 = (new Date(june1.getFullYear() + 2, june1.getMonth() + 6, june1.getDate() + 19)).getTime() / 1000;\n      humanize.relativeTime(yearsFuture2).should.equal('in 2 years');\n\n      var wrapToYearsFuture1 = (new Date(june1.getFullYear() + 2, june1.getMonth() - 7, june1.getDate() + 19)).getTime() / 1000;\n      humanize.relativeTime(wrapToYearsFuture1).should.equal('in a year');\n\n    });\n\n  });\n\n  describe('#ordinal', function() {\n    it('should be able to return the correct ordinal string', function() {\n      var tests = {\n        0: '0th',\n        1: '1st',\n        2: '2nd',\n        3: '3rd',\n        4: '4th',\n        5: '5th',\n        11: '11th',\n        12: '12th',\n        13: '13th',\n        21: '21st',\n        31: '31st',\n        32: '32nd',\n        43: '43rd',\n        '87 Street': '87th',\n        '223 APT 23': '223rd',\n        'APT': '0th',\n        '-1': '-1st',\n        '-2': '-2nd',\n        '-3': '-3rd',\n        112: '112th'\n      };\n\n      for (var num in tests) {\n        humanize.ordinal(num).should.equal(tests[num]);\n      }\n    });\n  });\n\n\n  describe('#filesize', function() {\n    it('should be able to use the defaults properly', function() {\n      humanize.filesize(12).should.equal('12 bytes');\n      humanize.filesize(1021).should.equal('1,021 bytes');\n      humanize.filesize(1024).should.equal('1.00 KB');\n\n      humanize.filesize(Math.pow(1024, 2)).should.equal('1.00 MB');\n      humanize.filesize(Math.pow(1024, 3)).should.equal('1.00 GB');\n      humanize.filesize(Math.pow(1024, 4)).should.equal('1.00 TB');\n      humanize.filesize(Math.pow(1024, 5)).should.equal('1.00 PB');\n      humanize.filesize(Math.pow(1024, 6)).should.equal('1,024.00 PB');\n      humanize.filesize(1234567890).should.equal('1.15 GB');\n    });\n\n    it('should be able to change kilo to a different value', function() {\n      humanize.filesize(12, 1000).should.equal('12 bytes');\n      humanize.filesize(1021, 1000).should.equal('1.02 KB');\n      humanize.filesize(1024, 1000).should.equal('1.02 KB');\n      humanize.filesize(Math.pow(1024, 2), 1000).should.equal('1.05 MB');\n      humanize.filesize(Math.pow(1024, 3), 1000).should.equal('1.07 GB');\n      humanize.filesize(Math.pow(1024, 4), 1000).should.equal('1.10 TB');\n      humanize.filesize(Math.pow(1024, 5), 1000).should.equal('1.13 PB');\n      humanize.filesize(Math.pow(1024, 6), 1000).should.equal('1,152.92 PB');\n      humanize.filesize(1234567890, 1000).should.equal('1.23 GB');\n    });\n  });\n\n\n  describe('#intword', function() {\n    it('should be able to use the defaults properly', function() {\n      humanize.intword(12).should.equal('12.00');\n      humanize.intword(999).should.equal('999.00');\n      humanize.intword(1001).should.equal('1.00K');\n\n      humanize.intword(Math.pow(1000, 2)).should.equal('1.00M');\n      humanize.intword(Math.pow(1000, 3)).should.equal('1.00B');\n      humanize.intword(Math.pow(1000, 4)).should.equal('1.00T');\n      humanize.intword(1234567890).should.equal('1.23B');\n    });\n\n    it('should be able to change units or kilo to a different value', function() {\n      var units = ['ones', 'thousands', 'millions', 'billions', 'trillions'];\n      humanize.intword(12, units, 1000, 0, '.', ',', ' ').should.equal('12 ones');\n      humanize.intword(999, units, 1000, 0, '.', ',', ' ').should.equal('999 ones');\n      humanize.intword(1024, units, 1000, 0, '.', ',', ' ').should.equal('1 thousands');\n      humanize.intword(Math.pow(1000, 2), units, 1000, 0, '.', ',', ' ').should.equal('1 millions');\n      humanize.intword(Math.pow(1000, 3), units, 1000, 0, '.', ',', ' ').should.equal('1 billions');\n      humanize.intword(Math.pow(1000, 4), units, 1000, 0, '.', ',', ' ').should.equal('1 trillions');\n      humanize.intword(1234567890, units, 1000, 0, '.', ',', ' ').should.equal('1 billions');\n    });\n  });\n\n\n  describe('#linebreaks', function() {\n    it('should wrap the string with <p> tags', function() {\n      humanize.linebreaks('').should.equal('<p></p>');\n    });\n\n    it('should remove new lines at beginning and end', function() {\n      humanize.linebreaks(\"Foo\\n\\nBar\\n\\n\\n\").should.equal('<p>Foo</p><p>Bar</p>');\n      humanize.linebreaks(\"\\n\\r\\n\\rFoo\\n\\nBar\").should.equal('<p>Foo</p><p>Bar</p>');\n    });\n\n    it('should change all new lines into <br> tags', function() {\n      humanize.linebreaks(\"Foo\\nBar\").should.equal('<p>Foo<br />Bar</p>');\n      humanize.linebreaks(\"Foo\\nBar\\r\\nBlah\").should.equal('<p>Foo<br />Bar<br />Blah</p>');\n    });\n\n    it('should change all multi-new lines into <p> tags', function() {\n      humanize.linebreaks(\"Foo\\n\\nBar\").should.equal('<p>Foo</p><p>Bar</p>');\n      humanize.linebreaks(\"Foo\\n\\n\\nBar\").should.equal('<p>Foo</p><p>Bar</p>');\n      humanize.linebreaks(\"Foo\\n\\n\\r\\nBar\").should.equal('<p>Foo</p><p>Bar</p>');\n      humanize.linebreaks(\"Foo\\n\\n\\r\\n\\rBar\").should.equal('<p>Foo</p><p>Bar</p>');\n    });\n  });\n\n  describe('#nl2br', function() {\n    it('should change any type of new line into a <br />', function() {\n      humanize.nl2br('').should.equal('');\n      humanize.nl2br(\"\\n\").should.equal('<br />');\n      humanize.nl2br(\"\\r\").should.equal('<br />');\n      humanize.nl2br(\"\\r\\n\").should.equal('<br />');\n      humanize.nl2br(\"Foo\\nBar\").should.equal('Foo<br />Bar');\n      humanize.nl2br(\"\\r\\nFoo\\nBar\\n\").should.equal('<br />Foo<br />Bar<br />');\n      humanize.nl2br(\"\\r\\r\\n\\nFoo\\nBar\\n\\n\\r\\n\\r\").should.equal('<br /><br /><br />Foo<br />Bar<br /><br /><br /><br />');\n    });\n  });\n\n  describe('#truncatechars', function() {\n    it('should be able to truncate characters properly', function() {\n      humanize.truncatechars('foobar', 0).should.equal('…');\n      humanize.truncatechars('foobar', 1).should.equal('f…');\n      humanize.truncatechars('foobar', 2).should.equal('fo…');\n      humanize.truncatechars('foobar', 3).should.equal('foo…');\n      humanize.truncatechars('foobar', 4).should.equal('foob…');\n    });\n  });\n\n  describe('#truncatewords', function() {\n    it('should be able to truncate words properly', function() {\n      humanize.truncatewords('a b c d e', 0).should.equal('…');\n      humanize.truncatewords('a b c d e', 1).should.equal('a…');\n      humanize.truncatewords('a b c d e', 2).should.equal('a b…');\n      humanize.truncatewords('a b c d e', 3).should.equal('a b c…');\n      humanize.truncatewords('a b c d e', 4).should.equal('a b c d…');\n    });\n  });\n\n\n\n});\n"}